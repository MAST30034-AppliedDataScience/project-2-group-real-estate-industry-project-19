import os
import requests
import json
from urllib.parse import urlencode
from urllib.request import urlretrieve
import shutil
import zipfile

data_dir = '../data/'
landing_dir = data_dir + 'landing/'
raw_dir = data_dir + 'raw/'

def fetch_data_from_api(ids, start_period, dimension_at_observation, output_file):
    base_url = "https://api.data.abs.gov.au/data/ABS,ABS_REGIONAL_ASGS2021,/.."
    params = {
        'startPeriod': start_period,
        'dimensionAtObservation': dimension_at_observation,
    }
    
    # Ensure the directory exists
    os.makedirs(os.path.dirname(output_file), exist_ok=True)

    for i in range(0, len(ids), 50):  # Split IDs into batches of 50
        batch_ids = ids[i:i + 50]
        url = base_url + '+'.join(map(str, batch_ids)) + '.A?' + urlencode(params)

        try:
            print(f"Fetching data from the API with batch: {batch_ids}...")
            response = requests.get(url, timeout=60)  # Set a longer timeout if necessary
            response.raise_for_status()  # Raise an error for bad responses

            # Parsing the response
            data = response.json()
            print("Data fetched successfully.")

            # Append or save the data (in this example, it appends to a file)
            with open(output_file, 'a') as file:
                json.dump(data, file, indent=4)  # indent=4 for pretty printing
            print(f"Data saved successfully to {output_file}.")

        except requests.exceptions.HTTPError as http_err:
            print(f"HTTP error occurred: {http_err}")
        except requests.exceptions.RequestException as req_err:
            print(f"Request error occurred: {req_err}")
        except Exception as err:
            print(f"Other error occurred: {err}")

    
        
ids = [217041480, 217041479, 217041478, 217041477, 217031475, 217031476, 217031473, 217031472, 217031474, 
217031471, 217011421, 217011423, 217011422, 217011420, 21704, 21703, 21701, 204011062, 203021488, 
203021487, 203021486, 203021485, 203021047, 202031033, 202031032, 202021031, 202021030, 202021029, 
202021028, 202021027, 202021026, 201011484, 201011483, 214021592, 214021591, 214021385, 214021384, 
214021383, 214021381, 214021382, 214021379, 214021377, 214021378, 214011376, 214011374, 214011375, 
214011373, 214011372, 214011371, 214011370, 21402, 21401, 213051582, 213051590, 213051588, 213051589, 
213051585, 213051587, 213051586, 213051584, 213051583, 213051581, 213051580, 213051579, 213051468, 
213051467, 213051466, 213051368, 213051464, 213051362, 213051363, 213051361, 213041575, 213041574, 
213041578, 213041576, 213041577, 213041573, 213041572, 213041463, 213041571, 213041462, 213041461, 
213041360, 213041358, 213041359, 213041353, 213031352, 213031350, 213031351, 213031349, 213031348, 
213031347, 213021346, 213021345, 213021344, 213021343, 213021342, 213021341, 213011570, 213011569, 
213011340, 213011339, 213011338, 213011337, 213011336, 213011335, 213011334, 213011333, 213011332, 
213011331, 213011329, 213011328, 21305, 21304, 21303, 21302, 21301, 212051568, 212051567, 212051327, 
212051326, 212051324, 212051325, 212051323, 212051322, 212051321, 212051319, 212041566, 212041565, 
212041564, 212041563, 212041459, 212041460, 212041318, 212041317, 212041316, 212041313, 212041312, 
212041310, 212041309, 212031562, 212031561, 212031560, 212031559, 212031558, 212031557, 212031556, 
212031555, 212031458, 212031457, 212031308, 212031306, 212031304, 212031303, 212031300, 212021554, 
212021553, 212021456, 212021455, 212021454, 212021453, 212021299, 212021297, 212021295, 212021293, 
212011552, 212011551, 212011550, 212011549, 212011548, 212011547, 212011546, 212011289, 21205, 21204, 
21203, 21202, 21201, 211051286, 211051285, 211051284, 211051283, 211051282, 211051281, 211051280, 
211051279, 211051278, 211051277, 211051276, 211051275, 211051274, 211041273, 211041272, 211041271, 
211041270, 211041269, 211031452, 211031451, 211031267, 211031450, 211031268, 211031266, 211031265, 
211031263, 211021262, 211021261, 211011449, 211011448, 211011447, 211011446, 211011260, 211011259, 
211011258, 211011257, 211011255, 211011256, 211011254, 211011251, 21104, 21105, 21103, 21102, 21101, 
210051545, 210051544, 210051543, 210051542, 210051445, 210051443, 210051442, 210051441, 210051250, 
210051247, 210051248, 210051246, 210051245, 210051243, 210051242, 210041541, 210041540, 210041539, 
210041240, 210031538, 210031537, 210031536, 210031535, 210031440, 210031439, 210031237, 210031236, 
210021235, 210021234, 210021233, 210021232, 210011534, 210011533, 210011231, 210011230, 210011228, 
210011227, 210011226, 21005, 21004, 21003, 21002, 21001, 209041532, 209041531, 209041530, 209041529, 
209041528, 209041527, 209041437, 209041436, 209041435, 209041433, 209041432, 209041431, 209041225, 
209041224, 209041223, 209041220, 209041221, 209041217, 209041216, 209031215, 209031212, 209031214, 
209031213, 209031211, 209031210, 209031209, 209021525, 209021526, 209021524, 209021523, 209021429, 
209021428, 209021205, 209011203, 209011202, 209011201, 209011199, 209011200, 209011198, 209011197, 
209011196, 20904, 20903, 20902, 20901, 208041195, 208041194, 208031190, 208031189, 208031188, 
208031187, 208031186, 208031185, 208031184, 208031183, 208021182, 208021181, 208021180, 208021179, 
208021178, 208021177, 208021176, 208021174, 20804, 20803, 20802, 20801, 208011173, 208011172, 208011171, 
208011170, 208011169, 208011168, 207031166, 207031167, 207031165, 207031164, 207031163, 207031162, 
207031161, 207021425, 207021424, 207021160, 207021159, 207021157, 207021156, 207011155, 207011154, 
207011152, 207011150, 207011149, 207011148, 207011147, 207011146, 20703, 20702, 20701, 20607, 20606, 
20605, 20604, 20603, 20602, 20601, 206071518, 206071517, 206071145, 206071143, 206071142, 206071141, 
206071140, 206071139, 206061516, 206061515, 206061138, 206061136, 206061135, 206051514, 206051513, 
206051512, 206051511, 206051134, 206051130, 206051129, 206051128, 206041127, 206041125, 206041124, 
206041121, 206041120, 206041119, 206041118, 206041117, 206031502, 206031501, 206031116, 206031115, 
206031113, 206021500, 206021499, 206021112, 206021110, 206011498, 206011497, 206011496, 206011495, 
206011109, 206011107, 206011106
]
fetch_data_from_api(ids, '2020', 'AllDimensions', 'data/raw/raw_abs.json')


def download_from_vic_datashare(url, output_dir, dataset_name):
    zip_dir = f"{output_dir}.zip"
    
    # Retrieve file from url
    urlretrieve(url, zip_dir) 

    # Check if the path exists
    if os.path.exists(output_dir):
        shutil.rmtree(output_dir)
    
    # Opens zip file
    with zipfile.ZipFile(zip_dir, 'r') as zip_ref:
        zip_ref.extractall(output_dir)

    # Deletes the zip file as the unzipped file has its own folder now
    os.remove(zip_dir)

    # Data is hidden in folders 
    shapefile_dir = output_dir + f'/ll_gda94/esrishape/whole_of_dataset/victoria/{dataset_name}/'
    
    # Move all files into the topmost folder for ease of coding
    file_names = os.listdir(shapefile_dir)
    for file_name in file_names:
        path = os.path.join(shapefile_dir, file_name)
        # Force move even if file exists
        shutil.move(path, f"{output_dir}/")

    # Remove the empty folder within the folder within the folder etc
    shutil.rmtree(f"{output_dir}/ll_gda94")
    
    return